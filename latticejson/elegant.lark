%import common.WS
%import common.ESCAPED_STRING

%ignore /&[\t \f]*\r?\n/  // LINE_CONTINUATION
%ignore WS
%ignore COMMENT

_NEWLINE: /[\t ]*\r?\n[\t ]*/+
COMMENT: /![^\n]*/

int: /[+-]?\d+/
float: /[+-]?\d+\.\d*([eE][+-]?\d+)?/ // needed to parse 1.
     | /[+-]?\d*\.\d+([eE][+-]?\d+)?/ // needed to parse .1
     | /[+-]?\d+[eE][+-]?\d+/         // needed to parse 1e1
string : ESCAPED_STRING

word: /\w+/
name: /\w+/ | "\"" /[\w:]+/ "\""
ref_name: ["\""] /[\w:]+/ ["\""]
ref_name_inv: "-" ref_name

file: statement*
?statement: element | lattice | command
element: name ":" word ("," attribute)* _NEWLINE
attribute: word "=" (int | float | string)
lattice: name ":" "LINE"i "=" arrangement _NEWLINE
arrangement: "(" object (","+ object)* ","* ")"
?object: ref_name | arrangement | multiply_object | ref_name_inv
multiply_object: int "*" object | object "*" int
command: word ["," word] _NEWLINE
